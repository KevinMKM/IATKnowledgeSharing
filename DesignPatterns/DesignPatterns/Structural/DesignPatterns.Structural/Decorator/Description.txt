Decorator Design Pattern
The Decorator is a structural design pattern that allows you to add behavior to objects dynamically without altering their structure. It is used to extend the functionality of individual objects in a flexible and reusable way.

Key Idea
Add new behavior to objects by wrapping them in special "decorator" objects.

Avoid subclassing to extend functionality.

Follow the Open/Closed Principle: Classes should be open for extension but closed for modification.

When to Use the Decorator Pattern
When you want to add responsibilities to objects dynamically.

For example, adding logging, caching, or validation to an object at runtime.

When you want to avoid subclassing to extend functionality.

Subclassing can lead to a class explosion if you have many combinations of behaviors.

When you want to follow the Open/Closed Principle.

You can extend the behavior of a class without modifying its code.

Example Without Decorator
Imagine you're building a coffee shop application where you can order different types of coffee with various add-ons (e.g., milk, sugar, whipped cream). Without the Decorator pattern, you might use inheritance to handle all possible combinations:

Problems with This Approach
Class Explosion:

For every combination of add-ons, you need to create a new subclass (e.g., CoffeeWithMilk, CoffeeWithSugar, CoffeeWithMilkAndSugar).

Inflexibility:

Adding a new add-on (e.g., whipped cream) requires creating multiple new subclasses.

Violates Open/Closed Principle:

You need to modify the class hierarchy to add new behavior.

With Decorator

Key Differences and Benefits
Dynamic Behavior:

You can add or remove behaviors (e.g., milk, sugar) at runtime.

No Class Explosion:

You don't need to create a new subclass for every combination of add-ons.

Flexibility:

You can easily add new decorators (e.g., whipped cream) without modifying existing code.

Open/Closed Principle:

The Coffee class is closed for modification but open for extension.

Summary
Without Decorator: Subclassing leads to class explosion, inflexibility, and violation of the Open/Closed Principle.

With Decorator: Dynamic behavior addition, no class explosion, and adherence to the Open/Closed Principle.

The Decorator pattern is ideal for adding responsibilities to objects dynamically, such as adding features to a coffee order, enhancing GUI components, or extending I/O streams. It promotes flexibility, reusability, and maintainability.